1.  What's the difference between undefined and null

  undefined -- undefined is a value that a variable will receive if it has been
  declared but not assigned a value (or it has been explicitly been assigned an
  undefined value). Non-existant / undeclared properties of (declared /
  existing) objects will also have this value.

  null -- null is an empty or 'non-value' that *has* been assigned to a
  variable.

  Null and Undefined are 2 of the six falsy values in javascript (the other 4
  being: 0, false, an empty string, and NaN).

  They are also both primitive values

  ( null !== undefined ) would return true, because, although they are both falsy,
  they are not strictly equivalent. They are, however, loosely equivalent
  (i.e. ( null == undefined ) would return true).

  Passing null into a function as an argument will use null as a value, but
  passing undefined into a function in this way will result in the default value
  for this parameter being used (if it exist).

  N.B. (typeof null) returns an object!
  ((typeof undefined) returns undefined)



2.  what does the && operator do?
3.  What does the || operator do?

  The && operator is the logical AND operator, and checks the truthiness of 2
  operands. The || operator is the logical OR operator, and checks the 
  truthiness of 2 operands. The syntax for both operators is:

  ( [operandOne] [operator] [operandTwo] ) e.g. (1 && 2), or (4 || ''), etc.

  Either operator will *always* return the value of *exactly* one of the two
  operands provided. i.e. (from Marius Schulz):
    A && B returns the value A if A can be coerced into false; 
      otherwise, it returns B.
    A || B returns the value A if A can be coerced into true;
      otherwise, it returns B.

  In the case of conditionals and other control-flow statements, the idea is
  whether or not these operators evaluate to a truthy value. For instance,
  if a conditional is supposed to evaluate the expression ("big" && "small"),
  it will evaluate it as true, because the && operator will return "big",
  which is truthy.

  N.B. Any value can be coerced into the boolean value equivalent to its
  truthiness by applying the NOT operator (!) twice. 
  e.g.
  const ourVar = '';
  console.log(!!(ourVar));
  // false



4.  Is using the + or unary plus operator the fastest way in converting a
    string to a number?

  Yes! It seems...

  For starters, a unary operator is an operator that takes a single operator
  and performs an operation using its value. The unary plus operator (+)
  takes an operator and attempts to convert it to a number (and will convert
  a value to NaN if it cannot be successfully converted to a number).

  Using the unary plus operator is only one of several ways to convert a
  string to a number in JS, but according to several people on the internet, 
  it is the fastest way based on the (now defunct) jsPerf's benchmarking
  results.
  
  Other options include:
    parseInt()
    parseFloat()
    Number()
    multiplying by 1 (e.g. '123'*1)


5.  What is the DOM?

  The DOM (Document Object Model) is a 


6.  What is event Propagation?

  Event Propagation is


7.  What's event Bubbling?

  Event Bubbling is


8.  What's event capturing?

  Event Capturing is


9.  What's the difference between the methods event.preventDefault() and
    event.stopPropagation() ?

  event.preventDefault() --
  
  event.stopPropagation() --


10. How would you know if the event.preventDefault() method was used in an
    element?

  If event.preventDefault() was used in an element, you would know by

11. Why does this code obj.someprop.x throw an error?

12. What is event.target?

13. What is event.currentTarget?

14. What's the difference between == and ===?

15. Why does it return false when comparing two similar objects in JS?

16. What does the !! operator do?

17. How to evaluate multiple expressions in one line?

18. What is Hoisting?

19. What is Scope?

20. What are Closures?

21. What are the falsy values in JS?

22. How to check if a value is falsy?

23. What does "use strict" do?

24. What's the value of 'this' in JS?

25. What is the prototype of an object?

26. What is an IIFE, what is the use of it?

27. What is the use Function.prototype.apply method?

28. What is the use Function.prototype.call method?

29. What's the difference between Function.prototype.apply and Function.prototype.call?

30. What is the usage of Function.prototype.bind?

31-40 missing

41. What are the new features in ES6 or ECMAScript 2015?

42. What's the difference between var, let and const keywords?

43. What are Arrow functions?

44. What are Classes?

45. What are Template Literals?

46. What is Object Destructuring?

47. What are ES6 Modules?

48. What is the Sete object and how does it work?

49. What is a Callback function?

50. What are promises?

51. What is async/await and how does it work?

52. What's the difference between Spread operator and Rest operator?

53. What are default parameters?

54. What are Wrapper objects?

55. What is the diffeerence between Implicit and Explicit Coercion?

56. What is NaN? and How to check if a value is NaN?

57. How to check if a value is an Array?

58. How to check if a number is even without using the % operator?

59. How to check if a certain property exists in an object?

60. What is AJAX?

61. What are the ways of making objects in JS?

62. What's the difference between Object.seal and Object.freeze methods?

63. What's the difference between the in operator and the hasOwnProperty method in objects?

64. What are the ways to deael with Asynchronous Code if JS?

65. What's the difference between a function expression and function declaration?
